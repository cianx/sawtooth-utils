#!/usr/bin/env bash
#
# Copyright 2017 Cian Montgomery
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------------

set -x
set -e

HTTPS_PROXY=$https_proxy
HTTP_PROXY=$http_proxy
top_dir=$ST_CORE

mkdir -p $ST_HOME/$USER

docker_run() {
    image=$1
    cmd=$2

    docker run -t --rm \
        -v $top_dir:/project/sawtooth-core \
        --env https_proxy=$https_proxy \
        --env http_proxy=$http_proxy \
        --env HTTPS_PROXY=$HTTPS_PROXY \
        --env HTTP_PROXY=$HTTP_PROXY \
        --user "$(id -u):$(id -g)" \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v $ST_HOME/$USER:/home/$USER \
        $image \
        $cmd
}

docker_exec() {
    container=$1
    shift

    docker exec \
        --user "$(id -u):$(id -g)" \
        $container \
        $@
}

destroy_old_containers() {
    image=$1
    container=$2
    if [ "$(docker ps -q -f name=^/$container$)" ]; then
        iid=`docker inspect --format="{{.Id}}" $image`
        cid=`docker inspect --format="{{.Image}}" $container`
        if [[ "$iid" != "$cid" ]]; then
            docker rm -f $container
        fi
    fi
}


docker_create() {
    image=$1
    container=$2
    cmd=$3

    # destroy_old_containers $image $container

    if [ ! "$(docker ps -q -f name=^/${container}$)" ]; then
        if [ "$(docker ps -aq -f status=exited -f name=^/${container}$)" ]; then
            docker rm $container
        fi

        docker create -t --rm \
            -v $top_dir:/project/sawtooth-core \
            -v /etc/passwd:/etc/passwd:ro \
            -v /etc/group:/etc/group:ro \
            --name $container \
            --env https_proxy=$https_proxy \
            --env http_proxy=$http_proxy \
            --env HTTPS_PROXY=$HTTPS_PROXY \
            --env HTTP_PROXY=$HTTP_PROXY \
            $image \
            $cmd
        docker start $container
    fi
}



DOCKER_DEV='cianx/sawtooth-dev-python'
docker pull $DOCKER_DEV

declare -a docker_images=(
    "sawtooth-dev-python"
    "sawtooth-rest_api"
    "sawtooth-tp_settings"
    "sawtooth-tp_intkey_python"
    "sawtooth-tp_supplychain_python"
    "sawtooth-tp_validator_registry"
    "sawtooth-tp_xo_python"
    "sawtooth-validator")


DOCKER_DEV='cianx/sawtooth-build-docs'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-build-docs")
for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done
docker_run sawtooth-dev-python

DOCKER_DEV='cianx/sawtooth-dev-go'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-dev-go"
    "sawtooth-tp_intkey_go"
    "sawtooth-tp_xo_go")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done
docker_run sawtooth-dev-python

DOCKER_DEV='cianx/sawtooth-dev-go'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-dev-go"
    "sawtooth-tp_intkey_go")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done
docker_run sawtooth-dev-go

DOCKER_DEV='cianx/sawtooth-dev-java'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-dev-java"
    "sawtooth-tp_intkey_java"
    "sawtooth-tp_xo_java")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done

# docker_create sawtooth-dev-java sawtooth-build-java 'sleep infinity'
#docker_exec sawtooth-build-java 'cd /project/sawtooth-core;bin/build_java_sdk'

docker_run sawtooth-dev-java

DOCKER_DEV='cianx/sawtooth-dev-javascript'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-dev-javascript"
    "sawtooth-tp_intkey_javascript"
    "sawtooth-tp_xo_javascript")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done
#docker_create sawtooth-dev-javascript sawtooth-build-javascript 'sleep infinity'
# docker_exec sawtooth-build-javascript "cd /project/sawtooth-core;bin/build_javascript_sdk"
docker_run sawtooth-dev-javascript


DOCKER_DEV='cianx/apache-basic_auth_proxy'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "apache-basic_auth_proxy")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done



DOCKER_DEV='cianx/sawtooth-build-docs'
docker pull $DOCKER_DEV
declare -a docker_images=(
    "sawtooth-build-docs")

for target in "${docker_images[@]}"
do
    docker tag $DOCKER_DEV $target
done

